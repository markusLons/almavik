name: Python application

on:
  push:
    branches:
      - main
      - exe
  pull_request:
    branches:
      - main
      - exe

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          python -m pip install pyinstaller
          pip install coverage
          python -m pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Set PYTHONPATH
        run: export PYTHONPATH="$PYTHONPATH:${{ github.workspace }}/src"
      - name: Run Test's
        run: coverage run --source=src src/tests/test_main.py
      - name: Generate coverage report
        run: |
          coverage report
          coverage html
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report1
          path: htmlcov

  test-windows:
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          python -m pip install pyinstaller
          pip install coverage
          python -m pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run Test's
        run: coverage run --source=src src/tests/test_main.py
      - name: Generate coverage report
        run: |
          coverage report
          coverage html 
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report2
          path: htmlcov

  build:
    runs-on: ubuntu-latest

    needs: [test, test-windows]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          python -m pip install pyinstaller
          python -m pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Build Docker image
        run: |
          docker build -t markuslons/almavik:${{ github.run_number }} .
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: markuslons
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push Docker image to Docker Hub
        run: |
          docker push markuslons/almavik:${{ github.run_number }}

  publish:
    runs-on: ubuntu-latest

    needs: [test, test-windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install wheel
      - name: Update version
        run: |
          echo "${{ github.run_number }}" > version.txt
          python setup.py install
        env:
          PACKAGE_VERSION: ${{ github.run_number }}
      - name: Build package
        run: python setup.py sdist bdist_wheel
      - name: Publish to PyPI
        run: |
          python -m pip install --upgrade pip
          pip install twine
          twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  build-windows:
    runs-on: windows-2019
    needs: [ test, test-windows ]

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          python -m pip install pyinstaller
          python -m pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run PyInstaller
        run: |
          python -m PyInstaller -w --onefile src/YPPRPO.py --name "almavik"
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AAA }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Automatically created successful release
          body: |
            Release windows version
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AAA }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "dist/almavik.exe"
          asset_name: "almavik.exe"
          asset_content_type: application/octet-stream
