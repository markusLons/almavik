Файл detectiondrop.py содержит определение класса detectorDrop, который представляет собой детектор капель на изображениях. Он содержит методы для обработки изображений и нахождения центра массы капель.

Класс detectorDrop содержит следующие атрибуты:

center_mass - список, который хранит центр массы для каждого изображения.
img - список, который хранит оригинальные изображения.
img_contour - список, который хранит изображения с контурами.
Класс detectorDrop содержит следующие методы:

Метод shaded_contours(self, zeroes, min_area=0, max_area=10000):
Применяет методы обработки изображений для поиска контуров капель в заданном диапазоне площади.

Аргументы:
    - `zeroes`: Входное изображение (массив numpy), все пиксели которого установлены в ноль.
    - `min_area` (по умолчанию 0): Минимальная площадь контура для рассмотрения.
    - `max_area` (по умолчанию 10000): Максимальная площадь контура для рассмотрения.

Возвращает:
    - `shaded`: Изображение с контурами капель.
Метод __init__(self, img_path):
Инициализирует класс detectorDrop с заданным путем к изображениям.
Аргументы:
    - `img_path`: Путь к директории с входными изображениями.
Методы инициализации класса detectorDrop выполняют следующие шаги:

1) Задают значения минимальной и максимальной площади контуров.
2) Читают все изображения в указанной директории.
3) Для каждого изображения выполняют обработку изображений для поиска контуров и центра массы.
4) Сохраняют информацию о центре массы, оригинальных изображениях и изображениях с контурами.
5) Файл ypprpo.py содержит определение класса Window, который представляет собой основное окно приложения. Он использует класс detectorDrop для обработки изображений и вывода результатов.

Класс Window содержит следующие методы:

Метод __init__(self, det):
Инициализирует главное окно приложения.
Аргументы:
    - `det` (detectorDrop): Объект класса `detectorDrop`, содержащий данные.

Методы инициализации класса Window выполняют следующие шаги:
1) Вызывается конструктор родительского класса __init__() для инициализации главного окна приложения.
2) Устанавливается заголовок окна с помощью метода setWindowTitle().
3) Создаются необходимые макеты (layouts) для расположения виджетов в окне. Используются QVBoxLayout и QHBoxLayout для вертикального и горизонтального расположения виджетов соответственно.
4) Создается виджет QLabel для отображения значения слайдера. Устанавливается выравнивание текста по центру с помощью метода setAlignment().
5) Создаются кнопки QPushButton для управления приложением.
6) Создаются экземпляры классов ImageCanvas, LineCanvas и Table с передачей им объекта det.
7) Определяются обработчики событий для кнопок и слайдера. Например, при изменении значения слайдера вызывается функция slider_value_changed(), которая обновляет отображаемое значение и выполняет необходимые действия.
8) Устанавливаются связи между виджетами и обработчиками событий с помощью методов clicked.connect() и valueChanged.connect().
9) Организуется расположение виджетов в макетах с помощью методов addWidget() и addLayout().
10) Устанавливается созданный макет для главного окна с помощью метода setLayout().

Функция main(folder_path="../exp1"):
Основная функция приложения, которая создает объект класса detectorDrop и главное окно приложения, а затем запускает цикл обработки событий.

Аргументы:
folder_path (str, optional): Путь к папке с данными. По умолчанию "../exp1".

